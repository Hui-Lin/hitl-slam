import os
import sys
import sipconfig
from PyQt4 import pyqtconfig

if len(sys.argv) >= 2:
	output_dir = sys.argv[1]
else:
	output_dir = 'python_wrapping'

if os.environ.has_key('COBOT_ROOT'):
	cobot_root = os.environ['COBOT_ROOT']
else:
	cobot_root = '../../../..'

# The name of the SIP build file generated by SIP and used by the build
# system.
build_file = "pyqt_sip_build_file.sbf"

# Get the PyQt configuration information.
config = pyqtconfig.Configuration()

# Get the extra SIP flags needed by the imported qt module.  Note that
# this normally only includes those flags (-x and -t) that relate to SIP's
# versioning system.
qt_sip_flags = config.pyqt_sip_flags

# Run SIP to generate the code.  Note that we tell SIP where to find the qt
# module's specification files using the -I flag.
os.system(" ".join([ \
    config.sip_bin, \
    "-c", output_dir, \
    "-b", output_dir + "/"+build_file, \
    "-I", config.pyqt_sip_dir, \
    qt_sip_flags, \
    "py_vector_display.sip" \
]))

# Create the Makefile.  The QtModuleMakefile class provided by the
# pyqtconfig module takes care of all the extra preprocessor, compiler and
# linker flags needed by the Qt library.
makefile = pyqtconfig.QtOpenGLModuleMakefile(
    dir=output_dir,
    configuration=config,
    build_file=build_file
)

# Add the library we are wrapping.  The name doesn't include any platform
# specific prefixes or extensions (e.g. the "lib" prefix on UNIX, or the
# ".dll" extension on Windows).
makefile.extra_libs = ["vector_display"]
makefile.LFLAGS.append("-L" + cobot_root + "/cobot_linux/lib")
makefile.LFLAGS.append("-Wl,-rpath,.")
makefile.INCDIR.append(cobot_root + "/cobot_linux/src/shared/math/")
makefile.INCDIR.append(cobot_root + "/cobot_linux/src/shared/util/")
makefile.INCDIR.append(cobot_root + "/cobot_linux/src/map/")
makefile.INCDIR.append(cobot_root + "/cobot_msgs/msg_gen/cpp/include/")
makefile.INCDIR.append(cobot_root + "/cobot_msgs/srv_gen/cpp/include/")
makefile.INCDIR.append(os.environ['ROS_ROOT'] + "/include/")
makefile.CXXFLAGS.append("-march=native")

# Generate the Makefile itself.
makefile.generate()
