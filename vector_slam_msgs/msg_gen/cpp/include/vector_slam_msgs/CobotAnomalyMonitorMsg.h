/* Auto-generated by genmsg_cpp for file /home/samer/code_release/hitl-slam/vector_slam_msgs/msg/CobotAnomalyMonitorMsg.msg */
#ifndef VECTOR_SLAM_MSGS_MESSAGE_COBOTANOMALYMONITORMSG_H
#define VECTOR_SLAM_MSGS_MESSAGE_COBOTANOMALYMONITORMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace vector_slam_msgs
{
template <class ContainerAllocator>
struct CobotAnomalyMonitorMsg_ {
  typedef CobotAnomalyMonitorMsg_<ContainerAllocator> Type;

  CobotAnomalyMonitorMsg_()
  : header()
  , anomaly(0.0)
  , mean()
  , var()
  , nSamples(0)
  {
  }

  CobotAnomalyMonitorMsg_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , anomaly(0.0)
  , mean(_alloc)
  , var(_alloc)
  , nSamples(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _anomaly_type;
  double anomaly;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _mean_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  mean;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _var_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  var;

  typedef int32_t _nSamples_type;
  int32_t nSamples;


  typedef boost::shared_ptr< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct CobotAnomalyMonitorMsg
typedef  ::vector_slam_msgs::CobotAnomalyMonitorMsg_<std::allocator<void> > CobotAnomalyMonitorMsg;

typedef boost::shared_ptr< ::vector_slam_msgs::CobotAnomalyMonitorMsg> CobotAnomalyMonitorMsgPtr;
typedef boost::shared_ptr< ::vector_slam_msgs::CobotAnomalyMonitorMsg const> CobotAnomalyMonitorMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vector_slam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "704f0ea26cbea2690711adde3ba16ce3";
  }

  static const char* value(const  ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x704f0ea26cbea269ULL;
  static const uint64_t static_value2 = 0x0711adde3ba16ce3ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotAnomalyMonitorMsg";
  }

  static const char* value(const  ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
float64 anomaly\n\
float64[] mean\n\
float64[] var\n\
int32 nSamples\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.anomaly);
    stream.next(m.mean);
    stream.next(m.var);
    stream.next(m.nSamples);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CobotAnomalyMonitorMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vector_slam_msgs::CobotAnomalyMonitorMsg_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "anomaly: ";
    Printer<double>::stream(s, indent + "  ", v.anomaly);
    s << indent << "mean[]" << std::endl;
    for (size_t i = 0; i < v.mean.size(); ++i)
    {
      s << indent << "  mean[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mean[i]);
    }
    s << indent << "var[]" << std::endl;
    for (size_t i = 0; i < v.var.size(); ++i)
    {
      s << indent << "  var[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.var[i]);
    }
    s << indent << "nSamples: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nSamples);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VECTOR_SLAM_MSGS_MESSAGE_COBOTANOMALYMONITORMSG_H

