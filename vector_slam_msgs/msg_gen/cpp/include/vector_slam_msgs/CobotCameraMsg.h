/* Auto-generated by genmsg_cpp for file /home/samer/code_release/hitl-slam/vector_slam_msgs/msg/CobotCameraMsg.msg */
#ifndef VECTOR_SLAM_MSGS_MESSAGE_COBOTCAMERAMSG_H
#define VECTOR_SLAM_MSGS_MESSAGE_COBOTCAMERAMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/Image.h"

namespace vector_slam_msgs
{
template <class ContainerAllocator>
struct CobotCameraMsg_ {
  typedef CobotCameraMsg_<ContainerAllocator> Type;

  CobotCameraMsg_()
  : numCameras(0)
  , ip()
  , width()
  , height()
  , frames()
  {
  }

  CobotCameraMsg_(const ContainerAllocator& _alloc)
  : numCameras(0)
  , ip(_alloc)
  , width(_alloc)
  , height(_alloc)
  , frames(_alloc)
  {
  }

  typedef int64_t _numCameras_type;
  int64_t numCameras;

  typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _ip_type;
  std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  ip;

  typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _width_type;
  std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  width;

  typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _height_type;
  std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  height;

  typedef std::vector< ::sensor_msgs::Image_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::Image_<ContainerAllocator> >::other >  _frames_type;
  std::vector< ::sensor_msgs::Image_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::Image_<ContainerAllocator> >::other >  frames;


  typedef boost::shared_ptr< ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct CobotCameraMsg
typedef  ::vector_slam_msgs::CobotCameraMsg_<std::allocator<void> > CobotCameraMsg;

typedef boost::shared_ptr< ::vector_slam_msgs::CobotCameraMsg> CobotCameraMsgPtr;
typedef boost::shared_ptr< ::vector_slam_msgs::CobotCameraMsg const> CobotCameraMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vector_slam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2522c6cb08f4148b8caf7cd7df6d31a4";
  }

  static const char* value(const  ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2522c6cb08f4148bULL;
  static const uint64_t static_value2 = 0x8caf7cd7df6d31a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotCameraMsg";
  }

  static const char* value(const  ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 numCameras\n\
int64[] ip\n\
int64[] width\n\
int64[] height\n\
sensor_msgs/Image[] frames\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.numCameras);
    stream.next(m.ip);
    stream.next(m.width);
    stream.next(m.height);
    stream.next(m.frames);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CobotCameraMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vector_slam_msgs::CobotCameraMsg_<ContainerAllocator> & v) 
  {
    s << indent << "numCameras: ";
    Printer<int64_t>::stream(s, indent + "  ", v.numCameras);
    s << indent << "ip[]" << std::endl;
    for (size_t i = 0; i < v.ip.size(); ++i)
    {
      s << indent << "  ip[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.ip[i]);
    }
    s << indent << "width[]" << std::endl;
    for (size_t i = 0; i < v.width.size(); ++i)
    {
      s << indent << "  width[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.width[i]);
    }
    s << indent << "height[]" << std::endl;
    for (size_t i = 0; i < v.height.size(); ++i)
    {
      s << indent << "  height[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.height[i]);
    }
    s << indent << "frames[]" << std::endl;
    for (size_t i = 0; i < v.frames.size(); ++i)
    {
      s << indent << "  frames[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "    ", v.frames[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // VECTOR_SLAM_MSGS_MESSAGE_COBOTCAMERAMSG_H

