/* Auto-generated by genmsg_cpp for file /home/samer/code_release/hitl-slam/vector_slam_msgs/msg/CobotEventsMsg.msg */
#ifndef VECTOR_SLAM_MSGS_MESSAGE_COBOTEVENTSMSG_H
#define VECTOR_SLAM_MSGS_MESSAGE_COBOTEVENTSMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace vector_slam_msgs
{
template <class ContainerAllocator>
struct CobotEventsMsg_ {
  typedef CobotEventsMsg_<ContainerAllocator> Type;

  CobotEventsMsg_()
  : timestamp(0.0)
  , module()
  , events()
  {
  }

  CobotEventsMsg_(const ContainerAllocator& _alloc)
  : timestamp(0.0)
  , module(_alloc)
  , events(_alloc)
  {
  }

  typedef double _timestamp_type;
  double timestamp;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _module_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  module;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _events_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  events;


  typedef boost::shared_ptr< ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct CobotEventsMsg
typedef  ::vector_slam_msgs::CobotEventsMsg_<std::allocator<void> > CobotEventsMsg;

typedef boost::shared_ptr< ::vector_slam_msgs::CobotEventsMsg> CobotEventsMsgPtr;
typedef boost::shared_ptr< ::vector_slam_msgs::CobotEventsMsg const> CobotEventsMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vector_slam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "720d21dc0ab80cc41adafa32a8a8e4f4";
  }

  static const char* value(const  ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x720d21dc0ab80cc4ULL;
  static const uint64_t static_value2 = 0x1adafa32a8a8e4f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotEventsMsg";
  }

  static const char* value(const  ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 timestamp\n\
string module\n\
string[] events\n\
\n\
";
  }

  static const char* value(const  ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.module);
    stream.next(m.events);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CobotEventsMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vector_slam_msgs::CobotEventsMsg_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "module: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.module);
    s << indent << "events[]" << std::endl;
    for (size_t i = 0; i < v.events.size(); ++i)
    {
      s << indent << "  events[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.events[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // VECTOR_SLAM_MSGS_MESSAGE_COBOTEVENTSMSG_H

