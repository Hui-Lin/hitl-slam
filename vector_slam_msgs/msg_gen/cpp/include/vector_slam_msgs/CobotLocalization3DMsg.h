/* Auto-generated by genmsg_cpp for file /home/samer/code_release/hitl-slam/vector_slam_msgs/msg/CobotLocalization3DMsg.msg */
#ifndef VECTOR_SLAM_MSGS_MESSAGE_COBOTLOCALIZATION3DMSG_H
#define VECTOR_SLAM_MSGS_MESSAGE_COBOTLOCALIZATION3DMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace vector_slam_msgs
{
template <class ContainerAllocator>
struct CobotLocalization3DMsg_ {
  typedef CobotLocalization3DMsg_<ContainerAllocator> Type;

  CobotLocalization3DMsg_()
  : timeStamp(0.0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  , angle_w(0.0)
  , angle_x(0.0)
  , angle_y(0.0)
  , angle_z(0.0)
  , conf(0.0)
  , map()
  {
  }

  CobotLocalization3DMsg_(const ContainerAllocator& _alloc)
  : timeStamp(0.0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  , angle_w(0.0)
  , angle_x(0.0)
  , angle_y(0.0)
  , angle_z(0.0)
  , conf(0.0)
  , map(_alloc)
  {
  }

  typedef double _timeStamp_type;
  double timeStamp;

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _z_type;
  float z;

  typedef float _angle_w_type;
  float angle_w;

  typedef float _angle_x_type;
  float angle_x;

  typedef float _angle_y_type;
  float angle_y;

  typedef float _angle_z_type;
  float angle_z;

  typedef float _conf_type;
  float conf;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  map;


  typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct CobotLocalization3DMsg
typedef  ::vector_slam_msgs::CobotLocalization3DMsg_<std::allocator<void> > CobotLocalization3DMsg;

typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalization3DMsg> CobotLocalization3DMsgPtr;
typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalization3DMsg const> CobotLocalization3DMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vector_slam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "25565b272405f868405eb6f47a0058f7";
  }

  static const char* value(const  ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x25565b272405f868ULL;
  static const uint64_t static_value2 = 0x405eb6f47a0058f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotLocalization3DMsg";
  }

  static const char* value(const  ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 timeStamp\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 angle_w\n\
float32 angle_x\n\
float32 angle_y\n\
float32 angle_z\n\
float32 conf\n\
string map\n\
\n\
";
  }

  static const char* value(const  ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timeStamp);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.angle_w);
    stream.next(m.angle_x);
    stream.next(m.angle_y);
    stream.next(m.angle_z);
    stream.next(m.conf);
    stream.next(m.map);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CobotLocalization3DMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vector_slam_msgs::CobotLocalization3DMsg_<ContainerAllocator> & v) 
  {
    s << indent << "timeStamp: ";
    Printer<double>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "angle_w: ";
    Printer<float>::stream(s, indent + "  ", v.angle_w);
    s << indent << "angle_x: ";
    Printer<float>::stream(s, indent + "  ", v.angle_x);
    s << indent << "angle_y: ";
    Printer<float>::stream(s, indent + "  ", v.angle_y);
    s << indent << "angle_z: ";
    Printer<float>::stream(s, indent + "  ", v.angle_z);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
    s << indent << "map: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VECTOR_SLAM_MSGS_MESSAGE_COBOTLOCALIZATION3DMSG_H

