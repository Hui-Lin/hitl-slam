/* Auto-generated by genmsg_cpp for file /home/samer/code_release/hitl-slam/vector_slam_msgs/msg/CobotStatusMsg.msg */
#ifndef VECTOR_SLAM_MSGS_MESSAGE_COBOTSTATUSMSG_H
#define VECTOR_SLAM_MSGS_MESSAGE_COBOTSTATUSMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace vector_slam_msgs
{
template <class ContainerAllocator>
struct CobotStatusMsg_ {
  typedef CobotStatusMsg_<ContainerAllocator> Type;

  CobotStatusMsg_()
  : header()
  , timestamp(0.0)
  , loc_x(0.0)
  , loc_y(0.0)
  , orientation(0.0)
  , particles_x()
  , particles_y()
  , particles_weight()
  , locations_weight()
  , currentNavCommand(0)
  , obsAvDir_x(0.0)
  , obsAvDir_y(0.0)
  , pathBlocked(false)
  , batteryVoltage(0.0)
  , emergencyStop(false)
  , cobotMode(0)
  , currentCommand(0)
  , navComplete(false)
  , currentEdge(0)
  , edgeProgress(0.0)
  , edgeRemaining(0.0)
  , edgeNavDuration(0.0)
  , pathPlan_x()
  , pathPlan_y()
  {
  }

  CobotStatusMsg_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , timestamp(0.0)
  , loc_x(0.0)
  , loc_y(0.0)
  , orientation(0.0)
  , particles_x(_alloc)
  , particles_y(_alloc)
  , particles_weight(_alloc)
  , locations_weight(_alloc)
  , currentNavCommand(0)
  , obsAvDir_x(0.0)
  , obsAvDir_y(0.0)
  , pathBlocked(false)
  , batteryVoltage(0.0)
  , emergencyStop(false)
  , cobotMode(0)
  , currentCommand(0)
  , navComplete(false)
  , currentEdge(0)
  , edgeProgress(0.0)
  , edgeRemaining(0.0)
  , edgeNavDuration(0.0)
  , pathPlan_x(_alloc)
  , pathPlan_y(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _timestamp_type;
  double timestamp;

  typedef float _loc_x_type;
  float loc_x;

  typedef float _loc_y_type;
  float loc_y;

  typedef float _orientation_type;
  float orientation;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _particles_x_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  particles_x;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _particles_y_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  particles_y;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _particles_weight_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  particles_weight;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _locations_weight_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  locations_weight;

  typedef uint16_t _currentNavCommand_type;
  uint16_t currentNavCommand;

  typedef float _obsAvDir_x_type;
  float obsAvDir_x;

  typedef float _obsAvDir_y_type;
  float obsAvDir_y;

  typedef uint8_t _pathBlocked_type;
  uint8_t pathBlocked;

  typedef float _batteryVoltage_type;
  float batteryVoltage;

  typedef uint8_t _emergencyStop_type;
  uint8_t emergencyStop;

  typedef int16_t _cobotMode_type;
  int16_t cobotMode;

  typedef int16_t _currentCommand_type;
  int16_t currentCommand;

  typedef uint8_t _navComplete_type;
  uint8_t navComplete;

  typedef int32_t _currentEdge_type;
  int32_t currentEdge;

  typedef float _edgeProgress_type;
  float edgeProgress;

  typedef float _edgeRemaining_type;
  float edgeRemaining;

  typedef double _edgeNavDuration_type;
  double edgeNavDuration;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pathPlan_x_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  pathPlan_x;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pathPlan_y_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  pathPlan_y;


  typedef boost::shared_ptr< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct CobotStatusMsg
typedef  ::vector_slam_msgs::CobotStatusMsg_<std::allocator<void> > CobotStatusMsg;

typedef boost::shared_ptr< ::vector_slam_msgs::CobotStatusMsg> CobotStatusMsgPtr;
typedef boost::shared_ptr< ::vector_slam_msgs::CobotStatusMsg const> CobotStatusMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vector_slam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4e8dff9d792649b915399841b6e125a2";
  }

  static const char* value(const  ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4e8dff9d792649b9ULL;
  static const uint64_t static_value2 = 0x15399841b6e125a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotStatusMsg";
  }

  static const char* value(const  ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
float64 timestamp\n\
\n\
float32 loc_x\n\
float32 loc_y\n\
float32 orientation\n\
\n\
float32[] particles_x\n\
float32[] particles_y\n\
float32[] particles_weight\n\
float32[] locations_weight\n\
\n\
uint16 currentNavCommand\n\
float32 obsAvDir_x\n\
float32 obsAvDir_y\n\
bool pathBlocked\n\
\n\
float32 batteryVoltage\n\
bool emergencyStop\n\
\n\
# Cobot Operation modes:\n\
# 0 = JoystickMode\n\
# 1 = JoystickObstAvMode\n\
# 2 = MotionPrimitiveMode\n\
# 3 = MotionPrimitiveObstAvMode\n\
# 4 = TeleOpMode\n\
# 5 = TestMode\n\
# 6 = AllStopMode\n\
int16 cobotMode\n\
\n\
# Cobot Commands:\n\
# 0 = NavCmdNone\n\
# 1 = NavCmdGoTo\n\
# 2 = NavCmdMoveStraight\n\
# 3 = NavCmdMoveDownCorridor\n\
# 4 = NavCmdIntegratedTurn\n\
# 5 = NavCmdInPlaceTurn\n\
# 6 = NavCmdTurnAndMoveStraight\n\
# 7 = NavCmdAbort\n\
int16 currentCommand\n\
bool navComplete\n\
\n\
int32 currentEdge\n\
float32 edgeProgress\n\
float32 edgeRemaining\n\
float64 edgeNavDuration\n\
\n\
float32[] pathPlan_x\n\
float32[] pathPlan_y\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.timestamp);
    stream.next(m.loc_x);
    stream.next(m.loc_y);
    stream.next(m.orientation);
    stream.next(m.particles_x);
    stream.next(m.particles_y);
    stream.next(m.particles_weight);
    stream.next(m.locations_weight);
    stream.next(m.currentNavCommand);
    stream.next(m.obsAvDir_x);
    stream.next(m.obsAvDir_y);
    stream.next(m.pathBlocked);
    stream.next(m.batteryVoltage);
    stream.next(m.emergencyStop);
    stream.next(m.cobotMode);
    stream.next(m.currentCommand);
    stream.next(m.navComplete);
    stream.next(m.currentEdge);
    stream.next(m.edgeProgress);
    stream.next(m.edgeRemaining);
    stream.next(m.edgeNavDuration);
    stream.next(m.pathPlan_x);
    stream.next(m.pathPlan_y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CobotStatusMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vector_slam_msgs::CobotStatusMsg_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "loc_x: ";
    Printer<float>::stream(s, indent + "  ", v.loc_x);
    s << indent << "loc_y: ";
    Printer<float>::stream(s, indent + "  ", v.loc_y);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
    s << indent << "particles_x[]" << std::endl;
    for (size_t i = 0; i < v.particles_x.size(); ++i)
    {
      s << indent << "  particles_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.particles_x[i]);
    }
    s << indent << "particles_y[]" << std::endl;
    for (size_t i = 0; i < v.particles_y.size(); ++i)
    {
      s << indent << "  particles_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.particles_y[i]);
    }
    s << indent << "particles_weight[]" << std::endl;
    for (size_t i = 0; i < v.particles_weight.size(); ++i)
    {
      s << indent << "  particles_weight[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.particles_weight[i]);
    }
    s << indent << "locations_weight[]" << std::endl;
    for (size_t i = 0; i < v.locations_weight.size(); ++i)
    {
      s << indent << "  locations_weight[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.locations_weight[i]);
    }
    s << indent << "currentNavCommand: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.currentNavCommand);
    s << indent << "obsAvDir_x: ";
    Printer<float>::stream(s, indent + "  ", v.obsAvDir_x);
    s << indent << "obsAvDir_y: ";
    Printer<float>::stream(s, indent + "  ", v.obsAvDir_y);
    s << indent << "pathBlocked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pathBlocked);
    s << indent << "batteryVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.batteryVoltage);
    s << indent << "emergencyStop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergencyStop);
    s << indent << "cobotMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cobotMode);
    s << indent << "currentCommand: ";
    Printer<int16_t>::stream(s, indent + "  ", v.currentCommand);
    s << indent << "navComplete: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.navComplete);
    s << indent << "currentEdge: ";
    Printer<int32_t>::stream(s, indent + "  ", v.currentEdge);
    s << indent << "edgeProgress: ";
    Printer<float>::stream(s, indent + "  ", v.edgeProgress);
    s << indent << "edgeRemaining: ";
    Printer<float>::stream(s, indent + "  ", v.edgeRemaining);
    s << indent << "edgeNavDuration: ";
    Printer<double>::stream(s, indent + "  ", v.edgeNavDuration);
    s << indent << "pathPlan_x[]" << std::endl;
    for (size_t i = 0; i < v.pathPlan_x.size(); ++i)
    {
      s << indent << "  pathPlan_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pathPlan_x[i]);
    }
    s << indent << "pathPlan_y[]" << std::endl;
    for (size_t i = 0; i < v.pathPlan_y.size(); ++i)
    {
      s << indent << "  pathPlan_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pathPlan_y[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // VECTOR_SLAM_MSGS_MESSAGE_COBOTSTATUSMSG_H

