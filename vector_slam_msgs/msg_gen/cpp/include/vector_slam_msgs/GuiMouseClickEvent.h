/* Auto-generated by genmsg_cpp for file /home/samer/code_release/hitl-slam/vector_slam_msgs/msg/GuiMouseClickEvent.msg */
#ifndef VECTOR_SLAM_MSGS_MESSAGE_GUIMOUSECLICKEVENT_H
#define VECTOR_SLAM_MSGS_MESSAGE_GUIMOUSECLICKEVENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Point32.h"

namespace vector_slam_msgs
{
template <class ContainerAllocator>
struct GuiMouseClickEvent_ {
  typedef GuiMouseClickEvent_<ContainerAllocator> Type;

  GuiMouseClickEvent_()
  : header()
  , mouse_down()
  , mouse_up()
  , modifiers(0)
  {
  }

  GuiMouseClickEvent_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , mouse_down(_alloc)
  , mouse_up(_alloc)
  , modifiers(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _mouse_down_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  mouse_down;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _mouse_up_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  mouse_up;

  typedef uint32_t _modifiers_type;
  uint32_t modifiers;


  typedef boost::shared_ptr< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator>  const> ConstPtr;
}; // struct GuiMouseClickEvent
typedef  ::vector_slam_msgs::GuiMouseClickEvent_<std::allocator<void> > GuiMouseClickEvent;

typedef boost::shared_ptr< ::vector_slam_msgs::GuiMouseClickEvent> GuiMouseClickEventPtr;
typedef boost::shared_ptr< ::vector_slam_msgs::GuiMouseClickEvent const> GuiMouseClickEventConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vector_slam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "024d093145787d5820945b81ee2e9ed4";
  }

  static const char* value(const  ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x024d093145787d58ULL;
  static const uint64_t static_value2 = 0x20945b81ee2e9ed4ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/GuiMouseClickEvent";
  }

  static const char* value(const  ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Feedback in terms of mouse clicks on the localization GUI.\n\
#\n\
\n\
# Standard header. The frame should normally be \"map\", since the localization\n\
# GUI reports coordinates in the world (map) frame.\n\
std_msgs/Header header\n\
\n\
# The 2D location where the \"MouseDown\" event occurred. The z coordinate of the\n\
# Point32 should be set to 0 by publishers, and ignored by subscribers.\n\
geometry_msgs/Point32 mouse_down\n\
\n\
# The 2D location where the \"MouseUp\" event occurred. The z coordinate of the\n\
# Point32 should be set to 0 by publishers, and ignored by subscribers.\n\
geometry_msgs/Point32 mouse_up\n\
\n\
# Binary mask of keyboard modifiers that were active when the mouse event occurred.\n\
# 0x01 = Alt key  modifier\n\
# 0x02 = Ctrl key modifier\n\
# 0x04 = Shift key modifier\n\
uint32 modifiers\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.mouse_down);
    stream.next(m.mouse_up);
    stream.next(m.modifiers);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GuiMouseClickEvent_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vector_slam_msgs::GuiMouseClickEvent_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mouse_down: ";
s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouse_down);
    s << indent << "mouse_up: ";
s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouse_up);
    s << indent << "modifiers: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.modifiers);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VECTOR_SLAM_MSGS_MESSAGE_GUIMOUSECLICKEVENT_H

