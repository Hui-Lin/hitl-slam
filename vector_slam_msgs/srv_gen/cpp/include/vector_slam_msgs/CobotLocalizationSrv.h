/* Auto-generated by genmsg_cpp for file /home/samer/code_release/hitl-slam/vector_slam_msgs/srv/CobotLocalizationSrv.srv */
#ifndef VECTOR_SLAM_MSGS_SERVICE_COBOTLOCALIZATIONSRV_H
#define VECTOR_SLAM_MSGS_SERVICE_COBOTLOCALIZATIONSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vector_slam_msgs
{
template <class ContainerAllocator>
struct CobotLocalizationSrvRequest_ {
  typedef CobotLocalizationSrvRequest_<ContainerAllocator> Type;

  CobotLocalizationSrvRequest_()
  : x(0.0)
  , y(0.0)
  , angle(0.0)
  , map()
  {
  }

  CobotLocalizationSrvRequest_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , angle(0.0)
  , map(_alloc)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _angle_type;
  float angle;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  map;


  typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct CobotLocalizationSrvRequest
typedef  ::vector_slam_msgs::CobotLocalizationSrvRequest_<std::allocator<void> > CobotLocalizationSrvRequest;

typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalizationSrvRequest> CobotLocalizationSrvRequestPtr;
typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalizationSrvRequest const> CobotLocalizationSrvRequestConstPtr;



template <class ContainerAllocator>
struct CobotLocalizationSrvResponse_ {
  typedef CobotLocalizationSrvResponse_<ContainerAllocator> Type;

  CobotLocalizationSrvResponse_()
  : x(0.0)
  , y(0.0)
  , angle(0.0)
  , map()
  {
  }

  CobotLocalizationSrvResponse_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , angle(0.0)
  , map(_alloc)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _angle_type;
  float angle;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  map;


  typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct CobotLocalizationSrvResponse
typedef  ::vector_slam_msgs::CobotLocalizationSrvResponse_<std::allocator<void> > CobotLocalizationSrvResponse;

typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalizationSrvResponse> CobotLocalizationSrvResponsePtr;
typedef boost::shared_ptr< ::vector_slam_msgs::CobotLocalizationSrvResponse const> CobotLocalizationSrvResponseConstPtr;


struct CobotLocalizationSrv
{

typedef CobotLocalizationSrvRequest Request;
typedef CobotLocalizationSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CobotLocalizationSrv
} // namespace vector_slam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7bee149dff10950f0ec889c3c3703fba";
  }

  static const char* value(const  ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7bee149dff10950fULL;
  static const uint64_t static_value2 = 0x0ec889c3c3703fbaULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotLocalizationSrvRequest";
  }

  static const char* value(const  ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float32 x\n\
float32 y\n\
float32 angle\n\
string map\n\
\n\
\n\
";
  }

  static const char* value(const  ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7bee149dff10950f0ec889c3c3703fba";
  }

  static const char* value(const  ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7bee149dff10950fULL;
  static const uint64_t static_value2 = 0x0ec889c3c3703fbaULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotLocalizationSrvResponse";
  }

  static const char* value(const  ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float32 x\n\
float32 y\n\
float32 angle\n\
string map\n\
\n\
\n\
";
  }

  static const char* value(const  ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.angle);
    stream.next(m.map);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CobotLocalizationSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.angle);
    stream.next(m.map);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CobotLocalizationSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vector_slam_msgs::CobotLocalizationSrv> {
  static const char* value() 
  {
    return "46b19ca691c0681ae113f7efec3bb4b6";
  }

  static const char* value(const vector_slam_msgs::CobotLocalizationSrv&) { return value(); } 
};

template<>
struct DataType<vector_slam_msgs::CobotLocalizationSrv> {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotLocalizationSrv";
  }

  static const char* value(const vector_slam_msgs::CobotLocalizationSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "46b19ca691c0681ae113f7efec3bb4b6";
  }

  static const char* value(const vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotLocalizationSrv";
  }

  static const char* value(const vector_slam_msgs::CobotLocalizationSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "46b19ca691c0681ae113f7efec3bb4b6";
  }

  static const char* value(const vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotLocalizationSrv";
  }

  static const char* value(const vector_slam_msgs::CobotLocalizationSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VECTOR_SLAM_MSGS_SERVICE_COBOTLOCALIZATIONSRV_H

