/* Auto-generated by genmsg_cpp for file /home/samer/code_release/hitl-slam/vector_slam_msgs/srv/CobotRemoteInterfaceSrv.srv */
#ifndef VECTOR_SLAM_MSGS_SERVICE_COBOTREMOTEINTERFACESRV_H
#define VECTOR_SLAM_MSGS_SERVICE_COBOTREMOTEINTERFACESRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vector_slam_msgs
{
template <class ContainerAllocator>
struct CobotRemoteInterfaceSrvRequest_ {
  typedef CobotRemoteInterfaceSrvRequest_<ContainerAllocator> Type;

  CobotRemoteInterfaceSrvRequest_()
  : drive_x(0.0)
  , drive_y(0.0)
  , drive_r(0.0)
  , max_vel_trans(0.0)
  , max_vel_rot(0.0)
  , command_num(0)
  , command_type(0)
  , loc_x(0.0)
  , loc_y(0.0)
  , orientation(0.0)
  , distance_tolerance(0.0)
  , angle_tolerance(0.0)
  , map()
  {
  }

  CobotRemoteInterfaceSrvRequest_(const ContainerAllocator& _alloc)
  : drive_x(0.0)
  , drive_y(0.0)
  , drive_r(0.0)
  , max_vel_trans(0.0)
  , max_vel_rot(0.0)
  , command_num(0)
  , command_type(0)
  , loc_x(0.0)
  , loc_y(0.0)
  , orientation(0.0)
  , distance_tolerance(0.0)
  , angle_tolerance(0.0)
  , map(_alloc)
  {
  }

  typedef float _drive_x_type;
  float drive_x;

  typedef float _drive_y_type;
  float drive_y;

  typedef float _drive_r_type;
  float drive_r;

  typedef float _max_vel_trans_type;
  float max_vel_trans;

  typedef float _max_vel_rot_type;
  float max_vel_rot;

  typedef int32_t _command_num_type;
  int32_t command_num;

  typedef int32_t _command_type_type;
  int32_t command_type;

  typedef float _loc_x_type;
  float loc_x;

  typedef float _loc_y_type;
  float loc_y;

  typedef float _orientation_type;
  float orientation;

  typedef float _distance_tolerance_type;
  float distance_tolerance;

  typedef float _angle_tolerance_type;
  float angle_tolerance;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  map;


  typedef boost::shared_ptr< ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct CobotRemoteInterfaceSrvRequest
typedef  ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<std::allocator<void> > CobotRemoteInterfaceSrvRequest;

typedef boost::shared_ptr< ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest> CobotRemoteInterfaceSrvRequestPtr;
typedef boost::shared_ptr< ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest const> CobotRemoteInterfaceSrvRequestConstPtr;



template <class ContainerAllocator>
struct CobotRemoteInterfaceSrvResponse_ {
  typedef CobotRemoteInterfaceSrvResponse_<ContainerAllocator> Type;

  CobotRemoteInterfaceSrvResponse_()
  : loc_x(0.0)
  , loc_y(0.0)
  , orientation(0.0)
  , particles_x()
  , particles_y()
  , particles_weight()
  , locations_weight()
  , err_code(0)
  {
  }

  CobotRemoteInterfaceSrvResponse_(const ContainerAllocator& _alloc)
  : loc_x(0.0)
  , loc_y(0.0)
  , orientation(0.0)
  , particles_x(_alloc)
  , particles_y(_alloc)
  , particles_weight(_alloc)
  , locations_weight(_alloc)
  , err_code(0)
  {
  }

  typedef float _loc_x_type;
  float loc_x;

  typedef float _loc_y_type;
  float loc_y;

  typedef float _orientation_type;
  float orientation;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _particles_x_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  particles_x;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _particles_y_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  particles_y;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _particles_weight_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  particles_weight;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _locations_weight_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  locations_weight;

  typedef int8_t _err_code_type;
  int8_t err_code;


  typedef boost::shared_ptr< ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct CobotRemoteInterfaceSrvResponse
typedef  ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<std::allocator<void> > CobotRemoteInterfaceSrvResponse;

typedef boost::shared_ptr< ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse> CobotRemoteInterfaceSrvResponsePtr;
typedef boost::shared_ptr< ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse const> CobotRemoteInterfaceSrvResponseConstPtr;


struct CobotRemoteInterfaceSrv
{

typedef CobotRemoteInterfaceSrvRequest Request;
typedef CobotRemoteInterfaceSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CobotRemoteInterfaceSrv
} // namespace vector_slam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6c65d09fa2d9280c4025b8e065bb2449";
  }

  static const char* value(const  ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6c65d09fa2d9280cULL;
  static const uint64_t static_value2 = 0x4025b8e065bb2449ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotRemoteInterfaceSrvRequest";
  }

  static const char* value(const  ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
float32 drive_x\n\
float32 drive_y\n\
float32 drive_r\n\
float32 max_vel_trans\n\
float32 max_vel_rot\n\
\n\
\n\
int32 command_num\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
int32 command_type\n\
\n\
\n\
float32 loc_x\n\
float32 loc_y\n\
float32 orientation\n\
float32 distance_tolerance\n\
float32 angle_tolerance\n\
string map\n\
\n\
\n\
";
  }

  static const char* value(const  ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "df36cae3dc736db325881999b2ce8e38";
  }

  static const char* value(const  ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdf36cae3dc736db3ULL;
  static const uint64_t static_value2 = 0x25881999b2ce8e38ULL;
};

template<class ContainerAllocator>
struct DataType< ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotRemoteInterfaceSrvResponse";
  }

  static const char* value(const  ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float32 loc_x\n\
float32 loc_y\n\
float32 orientation\n\
\n\
float32[] particles_x\n\
float32[] particles_y\n\
float32[] particles_weight\n\
float32[] locations_weight\n\
\n\
int8 err_code\n\
\n\
\n\
";
  }

  static const char* value(const  ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.drive_x);
    stream.next(m.drive_y);
    stream.next(m.drive_r);
    stream.next(m.max_vel_trans);
    stream.next(m.max_vel_rot);
    stream.next(m.command_num);
    stream.next(m.command_type);
    stream.next(m.loc_x);
    stream.next(m.loc_y);
    stream.next(m.orientation);
    stream.next(m.distance_tolerance);
    stream.next(m.angle_tolerance);
    stream.next(m.map);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CobotRemoteInterfaceSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.loc_x);
    stream.next(m.loc_y);
    stream.next(m.orientation);
    stream.next(m.particles_x);
    stream.next(m.particles_y);
    stream.next(m.particles_weight);
    stream.next(m.locations_weight);
    stream.next(m.err_code);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CobotRemoteInterfaceSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vector_slam_msgs::CobotRemoteInterfaceSrv> {
  static const char* value() 
  {
    return "01146b8ee6bc341b195eb59880324094";
  }

  static const char* value(const vector_slam_msgs::CobotRemoteInterfaceSrv&) { return value(); } 
};

template<>
struct DataType<vector_slam_msgs::CobotRemoteInterfaceSrv> {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotRemoteInterfaceSrv";
  }

  static const char* value(const vector_slam_msgs::CobotRemoteInterfaceSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "01146b8ee6bc341b195eb59880324094";
  }

  static const char* value(const vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotRemoteInterfaceSrv";
  }

  static const char* value(const vector_slam_msgs::CobotRemoteInterfaceSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "01146b8ee6bc341b195eb59880324094";
  }

  static const char* value(const vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vector_slam_msgs/CobotRemoteInterfaceSrv";
  }

  static const char* value(const vector_slam_msgs::CobotRemoteInterfaceSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VECTOR_SLAM_MSGS_SERVICE_COBOTREMOTEINTERFACESRV_H

